<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Toplhyi</title><link>https://toplhy.github.io</link><description>Toplhyi的烂摊子</description><copyright>Toplhyi</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/29943772?u=0084e717806403fb39c9a97ca92b10c88e380c3d&amp;v=4</url><title>avatar</title><link>https://toplhy.github.io</link></image><lastBuildDate>Mon, 01 Jul 2024 11:13:04 +0000</lastBuildDate><managingEditor>Toplhyi</managingEditor><ttl>60</ttl><webMaster>Toplhyi</webMaster><item><title>k8s的几个简单命令</title><link>https://toplhy.github.io/post/k8s-de-ji-ge-jian-dan-ming-ling.html</link><description>记录了k8s的几个简单命令&#13;
&#13;
```&#13;
kubectl命令格式为：kubectl 动作 资源&#13;
&#13;
# Deployment是k8s中用来管理发布的控制器&#13;
kubectl get deployment&#13;
kubectl get namespaces&#13;
&#13;
# Pod是k8s的最小单位，里面包含一组容器&#13;
kubectl get pods&#13;
&#13;
# 查看pod详情&#13;
kubectl describe pod $POD_NAME&#13;
&#13;
-- 查看日志&#13;
kubectl logs $POD_NAME&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/k8s-de-ji-ge-jian-dan-ming-ling.html</guid><pubDate>Mon, 01 Jul 2024 11:12:38 +0000</pubDate></item><item><title> docker容器备份迁移</title><link>https://toplhy.github.io/post/%20docker-rong-qi-bei-fen-qian-yi.html</link><description>记录docker容器备份迁移的过程&#13;
&#13;
### 1.创建容器快照&#13;
```&#13;
docker commit -p f4ef8866aeaf kingbase-bak&#13;
```&#13;
&#13;
### 2.tar包备份&#13;
```&#13;
docker save -o ~/kingbase-bak.tar kingbase-bak&#13;
```&#13;
&#13;
### 3.恢复容器&#13;
```&#13;
docker load -i ~/kingbase-bak.tar&#13;
```&#13;
&#13;
### 4.查看并运行&#13;
```&#13;
docker images&#13;
docker run ...&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/%20docker-rong-qi-bei-fen-qian-yi.html</guid><pubDate>Mon, 01 Jul 2024 11:11:56 +0000</pubDate></item><item><title>Docker-compose安装Portainer可视化工具</title><link>https://toplhy.github.io/post/Docker-compose-an-zhuang-Portainer-ke-shi-hua-gong-ju.html</link><description>记录使用docker-compose安装docker可视化管理工具portainer&#13;
&#13;
### docker-compose.yml&#13;
```&#13;
version: '3'&#13;
services:&#13;
  portainer:&#13;
    image:portainer/portainer&#13;
    container_name: portainer&#13;
    restart: always&#13;
    volumes:&#13;
      - '/var/run/docker.sock:/var/run/docker.sock'&#13;
      - './portainer/data:/data'&#13;
      - './portainer/Portainer-CN:/public'   # 汉化&#13;
    environment:          # 设置环境变量,相当于docker run命令中的-e&#13;
      TZ: Asia/Shanghai&#13;
      LANG: en_US.UTF-8&#13;
    ports:               # 映射端口&#13;
      - '9000:9000'&#13;
```&#13;
&#13;
### docker command&#13;
```&#13;
docker run -d -p 9000:9000 --restart=always --name portainer -v /var/run/docker.sock:/var/run/docker.sock -v /data/portainer:/data portainer/portainer&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-compose-an-zhuang-Portainer-ke-shi-hua-gong-ju.html</guid><pubDate>Mon, 01 Jul 2024 11:11:29 +0000</pubDate></item><item><title>Docker安装ActiveMQ</title><link>https://toplhy.github.io/post/Docker-an-zhuang-ActiveMQ.html</link><description>记录使用docker安装activemq队列&#13;
&#13;
### docker command&#13;
```&#13;
docker run --name activemq -p 61616:61616 -p 8161:8161 rmohr/activemq&#13;
```&#13;
&#13;
### describe&#13;
```&#13;
61616是 activemq 的容器使用端口&#13;
8161是 web 页面管理端口&#13;
-e ACTIVEMQ_ADMIN_LOGIN=admin 指定登录名&#13;
-e ACTIVEMQ_ADMIN_PASSWORD=123456 登录密码&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-an-zhuang-ActiveMQ.html</guid><pubDate>Mon, 01 Jul 2024 11:11:01 +0000</pubDate></item><item><title>Docker-compose安装Grafana</title><link>https://toplhy.github.io/post/Docker-compose-an-zhuang-Grafana.html</link><description>记录使用docker-compose安装grafana&#13;
&#13;
[参考文章](https://kalacloud.com/blog/grafana-with-prometheus-tutorial/)&#13;
&#13;
### docker-compose.yml&#13;
```&#13;
version: '3.4'&#13;
services:&#13;
  prometheus:&#13;
    image: prom/prometheus&#13;
    container_name: prometheus&#13;
    hostname: prometheus&#13;
    ports:&#13;
      - 9090:9090&#13;
    volumes:&#13;
      - ./prometheus.yml:/etc/prometheus/prometheus.yml&#13;
  prometheus-exporter:&#13;
    image: prom/node-exporter&#13;
    container_name: service&#13;
    hostname: service&#13;
    ports:&#13;
      - 9100:9100&#13;
  grafana:&#13;
    image: grafana/grafana&#13;
    container_name: grafana&#13;
    hostname: grafana&#13;
    ports:&#13;
      - 3000:3000&#13;
    volumes:&#13;
      - ./grafana.ini:/etc/grafana/grafana.ini&#13;
```&#13;
&#13;
### prometheus.yml&#13;
```&#13;
global:&#13;
  scrape_interval: 10s&#13;
scrape_configs:&#13;
- job_name: node&#13;
  static_configs:&#13;
  - targets: ['service:9100'] # NOT localhost since we named the host of service in docker-compose file&#13;
```&#13;
&#13;
### grafana.ini&#13;
```&#13;
&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-compose-an-zhuang-Grafana.html</guid><pubDate>Mon, 01 Jul 2024 11:10:35 +0000</pubDate></item><item><title>Docker安装Kingbase</title><link>https://toplhy.github.io/post/Docker-an-zhuang-Kingbase.html</link><description>记录使用docker-compose安装人大金仓kingbase数据库&#13;
&#13;
### docker hub&#13;
[kingbase](https://hub.docker.com/r/godmeowicesun/kingbase)&#13;
&#13;
### docker command&#13;
```&#13;
docker run -d -it --privileged=true -p 54321:54321 -v /opt/docker/kingbase-v8/opt:/opt --name kingbase-rv1 godmeowicesun/kingbase:es-v8-r3-rv1&#13;
```&#13;
&#13;
### docker-compose&#13;
```&#13;
version: '3'&#13;
services:&#13;
  kingbase:&#13;
    container_name: kingbase-v8&#13;
    image: godmeowicesun/kingbase:es-v8-r3-rv1&#13;
    ports:&#13;
      - 54321:54321&#13;
    restart: always&#13;
    environment:&#13;
      TZ: Asia/Shanghai&#13;
      LANG: en_US.UTF-8&#13;
    volumes:&#13;
      - /LHY/data/kingbase-v8/opt:/opt&#13;
    privileged: true&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-an-zhuang-Kingbase.html</guid><pubDate>Mon, 01 Jul 2024 11:10:03 +0000</pubDate></item><item><title>Docker-compose安装Sentinel</title><link>https://toplhy.github.io/post/Docker-compose-an-zhuang-Sentinel.html</link><description>记录使用docker-compose安装sentinel&#13;
&#13;
### docker-compose.yml&#13;
```&#13;
version: '3'&#13;
services:&#13;
  sentinel:&#13;
    image: bladex/sentinel-dashboard&#13;
    container_name: sentinel&#13;
    restart: on-failure&#13;
    environment:&#13;
      TZ: Asia/Shanghai&#13;
      LANG: en_US.UTF-8&#13;
    ports:&#13;
      - 8858:8858&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-compose-an-zhuang-Sentinel.html</guid><pubDate>Mon, 01 Jul 2024 11:09:31 +0000</pubDate></item><item><title>Docker-compose安装Nacos2.0.3</title><link>https://toplhy.github.io/post/Docker-compose-an-zhuang-Nacos2.0.3.html</link><description>记录使用docker-compose安装nacos2.0.3版本&#13;
&#13;
### docker-compose.yml&#13;
```&#13;
version: '3'&#13;
services:&#13;
nacos:&#13;
  container_name: nacos&#13;
  image: nacos/nacos-server:2.0.3&#13;
  ports:&#13;
    - 8848:8848&#13;
  restart: on-failure&#13;
  volumes:&#13;
    - './nacos/logs:/home/nacos/logs'&#13;
    - './nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties'&#13;
    - './nacos/conf/application.properties:/home/nacos/conf/application.properties'&#13;
    - './nacos/data:/home/nacos/data'&#13;
  environment:&#13;
    - PREFER_HOST_MODE=ip&#13;
    - MODE=standalone&#13;
    - SPRING_DATASOURCE_PLATFORM=mysql&#13;
    - MYSQL_SERVICE_HOST=172.17.126.149&#13;
    - MYSQL_SERVICE_DB_NAME=nacos&#13;
    - MYSQL_SERVICE_PORT=3306&#13;
    - MYSQL_SERVICE_USER=root&#13;
    - MYSQL_SERVICE_PASSWORD=root123&#13;
    - JVM_XMS=128m&#13;
    - JVM_XMX=128m&#13;
    - JVM_XMN=64m&#13;
  depends_on:&#13;
    - mysql&#13;
```&#13;
&#13;
### application.properties&#13;
```&#13;
# spring&#13;
server.servlet.contextPath=${SERVER_SERVLET_CONTEXTPATH:/nacos}&#13;
server.contextPath=/nacos&#13;
server.port=${NACOS_APPLICATION_PORT:8848}&#13;
spring.datasource.platform=${SPRING_DATASOURCE_PLATFORM:''}&#13;
nacos.cmdb.dumpTaskInterval=3600&#13;
nacos.cmdb.eventTaskInterval=10&#13;
nacos.cmdb.labelTaskInterval=300&#13;
nacos.cmdb.loadDataAtStart=false&#13;
db.num=${MYSQL_DATABASE_NUM:1}&#13;
db.url.0=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?${MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false}&#13;
db.url.1=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?${MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false}&#13;
db.user=${MYSQL_SERVICE_USER}&#13;
db.password=${MYSQL_SERVICE_PASSWORD}&#13;
### The auth system to use, currently only 'nacos' is supported:&#13;
nacos.core.auth.system.type=${NACOS_AUTH_SYSTEM_TYPE:nacos}&#13;
### The token expiration in seconds:&#13;
nacos.core.auth.default.token.expire.seconds=${NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000}&#13;
### The default token:&#13;
nacos.core.auth.default.token.secret.key=${NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789}&#13;
### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.&#13;
nacos.core.auth.caching.enabled=${NACOS_AUTH_CACHE_ENABLE:false}&#13;
nacos.core.auth.enable.userAgentAuthWhite=${NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE:false}&#13;
nacos.core.auth.server.identity.key=${NACOS_AUTH_IDENTITY_KEY:serverIdentity}&#13;
nacos.core.auth.server.identity.value=${NACOS_AUTH_IDENTITY_VALUE:security}&#13;
server.tomcat.accesslog.enabled=${TOMCAT_ACCESSLOG_ENABLED:false}&#13;
server.tomcat.accesslog.pattern=%h %l %u %t '%r' %s %b %D&#13;
# default current work dir&#13;
server.tomcat.basedir=&#13;
## spring security config&#13;
### turn off security&#13;
nacos.security.ignore.urls=${NACOS_SECURITY_IGNORE_URLS:/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**}&#13;
# metrics for elastic search&#13;
management.metrics.export.elastic.enabled=false&#13;
management.metrics.export.influx.enabled=false&#13;
nacos.naming.distro.taskDispatchThreadCount=10&#13;
nacos.naming.distro.taskDispatchPeriod=200&#13;
nacos.naming.distro.batchSyncKeyCount=1000&#13;
nacos.naming.distro.initDataRatio=0.9&#13;
nacos.naming.distro.syncRetryDelay=5000&#13;
nacos.naming.data.warmup=true&#13;
# If turn on auth system&#13;
nacos.core.auth.enabled=false&#13;
```&#13;
&#13;
### custom.properties&#13;
```&#13;
#spring.security.enabled=false&#13;
#management.security=false&#13;
#security.basic.enabled=false&#13;
#nacos.security.ignore.urls=/**&#13;
#management.metrics.export.elastic.host=http://localhost:9200&#13;
# metrics for prometheus&#13;
management.endpoints.web.exposure.include=*&#13;
# metrics for elastic search&#13;
#management.metrics.export.elastic.enabled=false&#13;
#management.metrics.export.elastic.host=http://localhost:9200&#13;
# metrics for influx&#13;
#management.metrics.export.influx.enabled=false&#13;
#management.metrics.export.influx.db=springboot&#13;
#management.metrics.export.influx.uri=http://localhost:8086&#13;
#management.metrics.export.influx.auto-create-db=true&#13;
#management.metrics.export.influx.consistency=one&#13;
#management.metrics.export.influx.compressed=true&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-compose-an-zhuang-Nacos2.0.3.html</guid><pubDate>Mon, 01 Jul 2024 11:07:53 +0000</pubDate></item><item><title>Docker-compose安装开源版MrDoc</title><link>https://toplhy.github.io/post/Docker-compose-an-zhuang-kai-yuan-ban-MrDoc.html</link><description>本文记录使用docker-compose安装MrDoc的过程，默认已具备docker和docker-compose环境。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-compose-an-zhuang-kai-yuan-ban-MrDoc.html</guid><pubDate>Mon, 01 Jul 2024 11:03:52 +0000</pubDate></item><item><title>Docker-compose安装MySQL</title><link>https://toplhy.github.io/post/Docker-compose-an-zhuang-MySQL.html</link><description>记录使用docker-compose安装mysql数据库&#13;
&#13;
### docker-compose.yml&#13;
&#13;
```&#13;
version: '3'&#13;
services:&#13;
mysql:&#13;
  container_name: mysql&#13;
  image: mysql:5.7&#13;
  ports:&#13;
    - 3306:3306&#13;
  restart: on-failure&#13;
  environment:&#13;
    TZ: Asia/Shanghai&#13;
    LANG: en_US.UTF-8&#13;
    MYSQL_ROOT_PASSWORD: root123&#13;
  volumes:&#13;
    - ./mysql/data:/var/lib/mysql&#13;
    - ./mysql/config/my.cnf:/etc/mysql/my.cnf&#13;
    - ./mysql/log:/var/log/mysql&#13;
```&#13;
&#13;
### my.cnf&#13;
&#13;
```&#13;
#&#13;
# The MySQL database server configuration file.&#13;
#&#13;
# You can copy this to one of:&#13;
# - '/etc/mysql/my.cnf' to set global options,&#13;
# - '~/.my.cnf' to set user-specific options.&#13;
#&#13;
# One can use all long options that the program supports.&#13;
# Run program with --help to get a list of available options and with&#13;
# --print-defaults to see which it would actually understand and use.&#13;
#&#13;
# For explanations see&#13;
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html&#13;
# This will be passed to all mysql clients&#13;
# It has been reported that passwords should be enclosed with ticks/quotes&#13;
# escpecially if they contain '#' chars...&#13;
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.&#13;
# Here is entries for some specific programs&#13;
# The following values assume you have at least 32M ram&#13;
[mysqld_safe]&#13;
socket          = /var/run/mysqld/mysqld.sock&#13;
nice            = 0&#13;
[mysqld]&#13;
#&#13;
# * Basic Settings&#13;
#&#13;
user            = mysql&#13;
pid-file        = /var/run/mysqld/mysqld.pid&#13;
socket          = /var/run/mysqld/mysqld.sock&#13;
port            = 3306&#13;
basedir         = /usr&#13;
datadir         = /var/lib/mysql&#13;
tmpdir          = /tmp&#13;
lc-messages-dir = /usr/share/mysql&#13;
skip-external-locking&#13;
#&#13;
# Instead of skip-networking the default is now to listen only on&#13;
# localhost which is more compatible and is not less secure.&#13;
bind-address            = 0.0.0.0&#13;
#&#13;
# * Fine Tuning&#13;
#&#13;
key_buffer_size         = 16M&#13;
max_allowed_packet      = 16M&#13;
thread_stack            = 192K&#13;
thread_cache_size       = 8&#13;
# This replaces the startup script and checks MyISAM tables if needed&#13;
# the first time they are touched&#13;
myisam-recover-options  = BACKUP&#13;
#max_connections        = 100&#13;
#table_cache            = 64&#13;
#thread_concurrency     = 10&#13;
#&#13;
# * Query Cache Configuration&#13;
#&#13;
query_cache_limit       = 1M&#13;
query_cache_size        = 16M&#13;
#&#13;
# * Logging and Replication&#13;
#&#13;
# Both location gets rotated by the cronjob.&#13;
# Be aware that this log type is a performance killer.&#13;
# As of 5.1 you can enable the log at runtime!&#13;
#general_log_file        = /var/log/mysql/mysql.log&#13;
#general_log             = 1&#13;
#&#13;
# Error log - should be very few entries.&#13;
#&#13;
log_error = /var/log/mysql/error.log&#13;
#&#13;
# Here you can see queries with especially long duration&#13;
#log_slow_queries       = /var/log/mysql/mysql-slow.log&#13;
#long_query_time = 2&#13;
#log-queries-not-using-indexes&#13;
#&#13;
# The following can be used as easy to replay backup logs or for replication.&#13;
# note: if you are setting up a replication slave, see README.Debian about&#13;
#       other settings you may need to change.&#13;
#server-id              = 1&#13;
#log_bin                        = /var/log/mysql/mysql-bin.log&#13;
expire_logs_days        = 10&#13;
max_binlog_size   = 100M&#13;
#binlog_do_db           = include_database_name&#13;
#binlog_ignore_db       = include_database_name&#13;
#&#13;
# * InnoDB&#13;
#&#13;
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.&#13;
# Read the manual for more InnoDB related options. There are many!&#13;
#&#13;
# * Security Features&#13;
#&#13;
# Read the manual, too, if you want chroot!&#13;
# chroot = /var/lib/mysql/&#13;
#&#13;
# For generating SSL certificates I recommend the OpenSSL GUI 'tinyca'.&#13;
#&#13;
# ssl-ca=/etc/mysql/cacert.pem&#13;
# ssl-cert=/etc/mysql/server-cert.pem&#13;
# ssl-key=/etc/mysql/server-key.pem&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Docker-compose-an-zhuang-MySQL.html</guid><pubDate>Mon, 01 Jul 2024 11:03:27 +0000</pubDate></item><item><title>IDEA远程调试代码</title><link>https://toplhy.github.io/post/IDEA-yuan-cheng-diao-shi-dai-ma.html</link><description>### 1. IDEA配置远程信息&#13;
&#13;
![1](/images/java/remote_1.png)&#13;
&#13;
### 2. 配置远程服务&#13;
&#13;
+ 复制图1中的Command line arguments for remote JVM&#13;
&#13;
```&#13;
-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&#13;
```&#13;
&#13;
+ 在远程服务上添加第二步的参数&#13;
&#13;
此处以tomcat示例，编辑catalina.sh文件，添加参数。</description><guid isPermaLink="true">https://toplhy.github.io/post/IDEA-yuan-cheng-diao-shi-dai-ma.html</guid><pubDate>Mon, 01 Jul 2024 11:02:24 +0000</pubDate></item><item><title>powerdesign通过sql文件生成模型</title><link>https://toplhy.github.io/post/powerdesign-tong-guo-sql-wen-jian-sheng-cheng-mo-xing.html</link><description>记录使用powerdesign通过sql文件生成模型&#13;
&#13;
### 选择Reverse Engineer&#13;
File &gt; Reverse Engineer &gt; Database&#13;
&#13;
### 选择sql文件&#13;
![选择sql文件](/images/database/2020-05-11-1.png)&#13;
&#13;
### 执行脚本&#13;
+ 将name改为sql的注释, Tools &gt; Execute Commands &gt; Edit/Run Sricpt 执行以下脚本&#13;
&#13;
```&#13;
Option Explicit&#13;
ValidationMode = True&#13;
InteractiveMode = im_Batch&#13;
Dim mdl ' the current model&#13;
' get the current active model&#13;
Set mdl = ActiveModel&#13;
If (mdl Is Nothing) Then&#13;
MsgBox 'There is no current Model '&#13;
ElseIf Not mdl.IsKindOf(PdPDM.cls_Model) Then&#13;
MsgBox 'The current model is not an Physical Data model. '&#13;
Else&#13;
ProcessFolder mdl&#13;
End If&#13;
Private sub ProcessFolder(folder)&#13;
On Error Resume Next&#13;
Dim Tab 'running table&#13;
for each Tab in folder.tables&#13;
if not tab.isShortcut then&#13;
tab.name = tab.comment&#13;
Dim col ' running column&#13;
for each col in tab.columns&#13;
if col.comment='' then&#13;
else&#13;
col.name= col.comment&#13;
end if&#13;
next&#13;
end if&#13;
next&#13;
 Dim view 'running view&#13;
 for each view in folder.Views&#13;
 if not view.isShortcut then&#13;
 view.name = view.comment&#13;
 end if&#13;
 next&#13;
 ' go into the sub-packages &#13;
 Dim f ' running folder &#13;
 For Each f In folder.Packages&#13;
 if not f.IsShortcut then&#13;
 ProcessFolder f&#13;
 end if&#13;
 Next&#13;
end sub&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/powerdesign-tong-guo-sql-wen-jian-sheng-cheng-mo-xing.html</guid><pubDate>Mon, 01 Jul 2024 11:01:05 +0000</pubDate></item><item><title>Oracle使用timestamp将数据还原到指定时间点</title><link>https://toplhy.github.io/post/Oracle-shi-yong-timestamp-jiang-shu-ju-huan-yuan-dao-zhi-ding-shi-jian-dian.html</link><description>Oracle使用timestamp将数据还原到指定时间点&#13;
&#13;
误删数据怎么办？&#13;
&#13;
### 查询还原时间点数据&#13;
```&#13;
select * from table_name as of timestamp to_timestamp('2018-03-27 15:40:00','yyyy-mm-dd hh24:mi:ss');&#13;
```&#13;
&#13;
### 还原数据&#13;
```&#13;
flashback table table_name to timestamp to_timestamp('2018-03-27 15:40:00','yyyy-mm-dd hh24:mi:ss');&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Oracle-shi-yong-timestamp-jiang-shu-ju-huan-yuan-dao-zhi-ding-shi-jian-dian.html</guid><pubDate>Mon, 01 Jul 2024 11:00:38 +0000</pubDate></item><item><title>Oracle创建表空间及用户</title><link>https://toplhy.github.io/post/Oracle-chuang-jian-biao-kong-jian-ji-yong-hu.html</link><description>记录Oracle创建表空间及用户&#13;
&#13;
### 导入数据&#13;
#### 1. 创建表空间&#13;
```&#13;
CREATE TABLESPACE gaoxiao DATAFILE '/opt/develop/oracle/oradata/gaoixao.ora' SIZE 500m;&#13;
&#13;
```&#13;
&#13;
#### 2. 创建用户&#13;
```&#13;
CREATE USER gaoxiao IDENTIFIED BY gaoxiao123456 DEFAULT TABLESPACE gaoxiao QUOTA 500m ON USERS;&#13;
```&#13;
&#13;
#### 3. 用户授权&#13;
```&#13;
GRANT CONNECT,dba,RESOURCE TO gaoxiao; 4.导入dmp文件 imp gaoxiao/gaoxiao123456 full=y file=/home/oracle/gaoxiao.dmp ignore=y&#13;
```&#13;
&#13;
### 导出指定用户的表到dmp文件&#13;
```&#13;
exp gaoxiao\_new/gaoxiao123456@dbsrv2 file=/home/oracle/gaoxiao\_new.dmp OWNER=gaoxiao\_new&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Oracle-chuang-jian-biao-kong-jian-ji-yong-hu.html</guid><pubDate>Mon, 01 Jul 2024 11:00:10 +0000</pubDate></item><item><title>Oracle查询表的最后修改时间</title><link>https://toplhy.github.io/post/Oracle-cha-xun-biao-de-zui-hou-xiu-gai-shi-jian.html</link><description>## 查询表的最后修改时间&#13;
```&#13;
select uat.* from user_all_tables uat;&#13;
&#13;
select object_name, created,last_ddl_time from user_objects;&#13;
&#13;
select &#13;
  uat.table_name as '表名',&#13;
  (select wmsys.wm_concat(to_char(last_ddl_time, 'yyyy-MM-dd HH24:mi')||'、') from user_objects where object_name = uat.table_name ) as '最后修改日期' &#13;
from user_all_tables uat &#13;
where uat.tablespace_name = 'ZHIYE';&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Oracle-cha-xun-biao-de-zui-hou-xiu-gai-shi-jian.html</guid><pubDate>Mon, 01 Jul 2024 10:59:42 +0000</pubDate></item><item><title>MySQL语句建库建用户</title><link>https://toplhy.github.io/post/MySQL-yu-ju-jian-ku-jian-yong-hu.html</link><description>### 建库建表语句&#13;
&#13;
```&#13;
create database tax_interview_test default character set utf8 collate utf8_general_ci;&#13;
&#13;
create user 'interview'@'%' identified by 'interview123';&#13;
&#13;
grant all on tax_interview_test.* to interview@'%';&#13;
&#13;
grant all privileges on *.* to 'interview'@'localhost' identified by 'interview123' with grant option;&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/MySQL-yu-ju-jian-ku-jian-yong-hu.html</guid><pubDate>Mon, 01 Jul 2024 10:58:58 +0000</pubDate></item><item><title>Mysql开启慢sql日志</title><link>https://toplhy.github.io/post/Mysql-kai-qi-man-sql-ri-zhi.html</link><description>查询慢查询日志是否开启，开启后会有一定性能影响&#13;
```&#13;
show variables like ‘%slow_query_log%’;&#13;
```&#13;
&#13;
开启慢查询sql日志&#13;
```&#13;
set global slow_query_log=1;&#13;
```&#13;
&#13;
查看慢SQL时间阀值，超过则记录进慢sql日志，需要重新连接&#13;
```&#13;
show variables like ‘long_query_time%’;&#13;
```&#13;
&#13;
查看慢SQL时间阀值，超过则记录进慢sql日志-修改该值后直接便可查询&#13;
```&#13;
show global variables like ‘long_query_time’;&#13;
```&#13;
&#13;
设置慢sql时间阀值&#13;
```&#13;
set global long_query_time=3&#13;
```&#13;
&#13;
查看有多少条慢sql记录&#13;
```&#13;
show global status like ‘%Slow_queries%’;&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Mysql-kai-qi-man-sql-ri-zhi.html</guid><pubDate>Mon, 01 Jul 2024 10:58:31 +0000</pubDate></item><item><title>达梦修改最大会话连接数</title><link>https://toplhy.github.io/post/da-meng-xiu-gai-zui-da-hui-hua-lian-jie-shu.html</link><description>达梦修改最大会话连接数&#13;
&#13;
```&#13;
SELECT SF_GET_PARA_VALUE(2,'MAX_SESSIONS');&#13;
&#13;
ALTER SYSTEM SET 'MAX_SESSIONS' =1000 spfile;&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-xiu-gai-zui-da-hui-hua-lian-jie-shu.html</guid><pubDate>Mon, 01 Jul 2024 10:58:05 +0000</pubDate></item><item><title>达梦慢sql查询及ET优化</title><link>https://toplhy.github.io/post/da-meng-man-sql-cha-xun-ji-ET-you-hua.html</link><description>达梦慢sql查询及ET优化&#13;
&#13;
### 达梦慢sql查询&#13;
&#13;
当 INI 参数 ENABLE_MONITOR=1、MONITOR_TIME=1 打开时，显示系统最近 1000 条执行时间超过预定值的 SQL 语句。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-man-sql-cha-xun-ji-ET-you-hua.html</guid><pubDate>Mon, 01 Jul 2024 10:57:34 +0000</pubDate></item><item><title>达梦建表空间和用户达梦建表空间和用户</title><link>https://toplhy.github.io/post/da-meng-jian-biao-kong-jian-he-yong-hu-da-meng-jian-biao-kong-jian-he-yong-hu.html</link><description>达梦建表空间和用户&#13;
&#13;
### 创建表空间&#13;
```&#13;
create tablespace ricisso datafile 'ricisso.dbf' size 100 autoextend on maxsize 500;&#13;
```&#13;
&#13;
### 创建用户&#13;
```&#13;
create user uricisso identified by uricisso123 default tablespace ricisso;&#13;
```&#13;
&#13;
### 给用户授权&#13;
```&#13;
grant resource,public to uricisso;&#13;
```&#13;
&#13;
### 创建模式&#13;
```&#13;
create schema test111 authorization uricisso;&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-jian-biao-kong-jian-he-yong-hu-da-meng-jian-biao-kong-jian-he-yong-hu.html</guid><pubDate>Mon, 01 Jul 2024 10:57:12 +0000</pubDate></item><item><title>达梦更换授权许可</title><link>https://toplhy.github.io/post/da-meng-geng-huan-shou-quan-xu-ke.html</link><description>达梦更换授权许可&#13;
&#13;
### 1.进入安装目录&#13;
```&#13;
cd /home/dmdba/dmdbms/bin&#13;
```&#13;
&#13;
### 2.删除或重命名dm.key，放入新的dm.key&#13;
&#13;
### 3.重启数据库&#13;
&#13;
### 4.查询是否生效&#13;
```&#13;
select * from V$LICENSE;&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-geng-huan-shou-quan-xu-ke.html</guid><pubDate>Mon, 01 Jul 2024 10:56:40 +0000</pubDate></item><item><title>达梦创建数据库实例及启动</title><link>https://toplhy.github.io/post/da-meng-chuang-jian-shu-ju-ku-shi-li-ji-qi-dong.html</link><description>达梦创建数据库实例及启动&#13;
&#13;
### 创建数据库实例&#13;
```&#13;
./dminit&#13;
input system dir: /home/dmdba/dmdatas&#13;
input db name: dmtest&#13;
input port num: 5236&#13;
input page size(4, 8, 16, 32): 8&#13;
input extent size(16, 32, 64): 16&#13;
input sec priv mode(0, 1): 0&#13;
input time zone(-12:59,+14:00): +08:00&#13;
string case sensitive? ([Y]es, [N]o): N&#13;
which charset to use? (0[GB18030], 1[UTF-8], 2[EUC-KR]): 1&#13;
length in char? ([Y]es, [N]o): N&#13;
enable database encrypt? ([Y]es, [N]o): N&#13;
input slice size(512, 4096): 512&#13;
page check mode? (0/1/2): 0&#13;
input elog path: /home/dmdba/dmdatas/logs&#13;
only create huge table with delta? (0/1): 1&#13;
rlog generate for huge? (0/1): 0&#13;
auto_overwrite mode? (0/1/2): 0&#13;
```&#13;
&#13;
### 注册服务及启动&#13;
```&#13;
chmod -R 777 dmtest&#13;
cd /home/dmdba/dmdbms/script/root&#13;
./dm_service_installer.sh -t dmserver -dm_ini /home/dmdba/dmdatas/dmtest/dm.ini -p DMTEST&#13;
systemctl start DmServiceDMTEST&#13;
```&#13;
&#13;
### 删除服务&#13;
```&#13;
./dm_service_uninstaller.sh -n DmServiceDMTEST&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-chuang-jian-shu-ju-ku-shi-li-ji-qi-dong.html</guid><pubDate>Mon, 01 Jul 2024 10:56:11 +0000</pubDate></item><item><title>达梦查询关键字</title><link>https://toplhy.github.io/post/da-meng-cha-xun-guan-jian-zi.html</link><description>达梦查询关键字&#13;
&#13;
```&#13;
SELECT * FROM V$RESERVED\_WORDS where keyword like '%view%';&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-cha-xun-guan-jian-zi.html</guid><pubDate>Mon, 01 Jul 2024 10:55:46 +0000</pubDate></item><item><title>达梦8创建JAVA外部函数</title><link>https://toplhy.github.io/post/da-meng-8-chuang-jian-JAVA-wai-bu-han-shu.html</link><description>记录达梦数据库创建JAVA外部函数的过程&#13;
&#13;
### 开发java函数功能&#13;
开发java函数功能，输出jar包&#13;
&#13;
### 将jar包安装到数据库&#13;
按照文档中例子中再DM安装目录bin下创建external_jar目录，将jar包放入了进去。</description><guid isPermaLink="true">https://toplhy.github.io/post/da-meng-8-chuang-jian-JAVA-wai-bu-han-shu.html</guid><pubDate>Mon, 01 Jul 2024 10:55:20 +0000</pubDate></item><item><title>编写数据库设计文档的小技巧</title><link>https://toplhy.github.io/post/bian-xie-shu-ju-ku-she-ji-wen-dang-de-xiao-ji-qiao.html</link><description>编写数据库设计文档的小技巧&#13;
&#13;
### mysql&#13;
```&#13;
SELECT&#13;
 COLUMN_NAME 英文名称,&#13;
 COLUMN_TYPE 数据类型,&#13;
 COLUMN_COMMENT 注释,&#13;
 '无' 备注&#13;
FROM&#13;
 INFORMATION_SCHEMA.COLUMNS &#13;
WHERE&#13;
 table_schema = 'tax_interview' --数据库名&#13;
 AND table_name = 'interview' --表名&#13;
```&#13;
&#13;
执行结果如下：&#13;
&#13;
![结果](/images/database/2020-05-11-2.png)&#13;
&#13;
### oracle&#13;
```&#13;
select &#13;
	a.owner '模式',&#13;
	a.table_name '表名',&#13;
	a.column_name '列名',&#13;
	a.data_type '数据类型',&#13;
	a.data_length '长度',&#13;
	a.nullable '非空',&#13;
	b.comments '注释'&#13;
from all_tab_columns a &#13;
left join all_col_comments b on a.owner = b.owner and a.table_name = b.table_name and a.column_name = b.column_name&#13;
where a.owner = 'MZJCSHZL' &#13;
	and a.table_name = 'BASE_ROLE'&#13;
order by a.table_name, a.column_id&#13;
```&#13;
&#13;
执行结果如下：&#13;
&#13;
![结果](/images/database/2020-05-11-4.png)&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/bian-xie-shu-ju-ku-she-ji-wen-dang-de-xiao-ji-qiao.html</guid><pubDate>Mon, 01 Jul 2024 10:54:47 +0000</pubDate></item><item><title>Grails4引用quartz插件报错问题</title><link>https://toplhy.github.io/post/Grails4-yin-yong-quartz-cha-jian-bao-cuo-wen-ti.html</link><description>Grails版本: 4.0.4&#13;
&#13;
项目中引入quartz插件：&#13;
```&#13;
compile 'org.grails.plugins:quartz:2.0.13'&#13;
```&#13;
启动报错：&#13;
```&#13;
Caused by: java.lang.NoClassDefFoundError: org/quartz/JobExecutionContext&#13;
```&#13;
解决：&#13;
```&#13;
compile('org.quartz-scheduler:quartz:2.2.3') {&#13;
    exclude group: 'slf4j-api', module: 'c3p0'&#13;
}&#13;
compile ('org.grails.plugins:quartz:2.0.13')&#13;
```&#13;
参考[https://github.com/grails-plugins/grails-quartz/issues/107](https://github.com/grails-plugins/grails-quartz/issues/107)&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Grails4-yin-yong-quartz-cha-jian-bao-cuo-wen-ti.html</guid><pubDate>Mon, 01 Jul 2024 10:54:07 +0000</pubDate></item><item><title>Grails上传文件大小限制修改</title><link>https://toplhy.github.io/post/Grails-shang-chuan-wen-jian-da-xiao-xian-zhi-xiu-gai.html</link><description>## grails3 文件上传大小限制修改&#13;
&#13;
上传文件时后台报错：&#13;
```&#13;
org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException&#13;
```&#13;
&#13;
搜到的解决方案都是在启动类中注入Bean，如下：&#13;
```&#13;
@Bean&#13;
public MultipartConfigElement multipartConfigElement() {&#13;
    MultipartConfigFactory factory = new MultipartConfigFactory();&#13;
    //  单个数据大小&#13;
    factory.setMaxFileSize(MaxFileSize); // KB,MB&#13;
    /// 总上传数据大小&#13;
    factory.setMaxRequestSize(MaxRequestSize);&#13;
    return factory.createMultipartConfig();&#13;
}&#13;
&#13;
```&#13;
配置之后测试无效。</description><guid isPermaLink="true">https://toplhy.github.io/post/Grails-shang-chuan-wen-jian-da-xiao-xian-zhi-xiu-gai.html</guid><pubDate>Mon, 01 Jul 2024 10:53:39 +0000</pubDate></item><item><title>Grails进行AOP切面</title><link>https://toplhy.github.io/post/Grails-jin-xing-AOP-qie-mian.html</link><description>记录在Grails3中使用AOP进行切面编程&#13;
&#13;
### 1. build.gradle中加入依赖&#13;
```&#13;
compile 'org.springframework.boot:spring-boot-starter-aop'&#13;
```&#13;
&#13;
### 2. 在resources.groovy中声明spring命名空间&#13;
```&#13;
beans{&#13;
      xmlns aop:'http://www.springframework.org/schema/aop'&#13;
}&#13;
```&#13;
&#13;
### 3. 注入bean，进行配置&#13;
```&#13;
beans{&#13;
      xmlns aop:'http://www.springframework.org/schema/aop'&#13;
      logAspect(LogAspect)&#13;
      aop {&#13;
            config('proxy-target-class': true) {&#13;
                  pointcut('id': 'controllerPointcut', 'expression': 'execution(* cas.interfaces.*.*(..))')&#13;
                  aspect('id': 'logAspect', 'ref': 'logAspect') {&#13;
                         'after-returning' 'method':'doAfterReturning','pointcut-ref': 'controllerPointcut', 'returning': 'returnObj'&#13;
                         'after-throwing' 'method':'doAfterThrowing','pointcut-ref': 'controllerPointcut', 'throwing': 'throwObj'&#13;
                  }&#13;
            }&#13;
       }&#13;
}&#13;
```&#13;
以上配置的意思是：&#13;
&#13;
proxy-target-class：true表示基于类的代理将使用,false表示默认使用Jdk基于接口的代理；&#13;
&#13;
pointcut是定义切入点，execution(* cas.interfaces.*.*(..))表示cas.interfaces包下的类的方法；&#13;
&#13;
aspect是定义切面，指向logAspect的bean，里面定义了切入的时机和切入时执行的方法。</description><guid isPermaLink="true">https://toplhy.github.io/post/Grails-jin-xing-AOP-qie-mian.html</guid><pubDate>Mon, 01 Jul 2024 10:53:14 +0000</pubDate></item><item><title>Grails3.X开发WebService</title><link>https://toplhy.github.io/post/Grails3.X-kai-fa-WebService.html</link><description>记录grails3.x下使用cxf开发webservice&#13;
&#13;
### 1. 在build.gradle中添加依赖&#13;
&#13;
```&#13;
dependencies {&#13;
	...&#13;
	compile 'org.grails.plugins:cxf:3.1.2'&#13;
}&#13;
```&#13;
&#13;
### 2. 创建Service类&#13;
&#13;
```&#13;
import grails.gorm.transactions.Transactional&#13;
import org.grails.cxf.utils.GrailsCxfEndpoint&#13;
&#13;
import javax.jws.WebMethod&#13;
import javax.jws.WebParam&#13;
import javax.jws.WebResult&#13;
&#13;
@Transactional&#13;
@GrailsCxfEndpoint(address = '/demo')&#13;
class DemoService {&#13;
&#13;
	@WebMethod&#13;
	@WebResult(name = 'result')&#13;
	def serviceMethod(@WebParam(name = 'id')Long id) {&#13;
		println '接收到的ID為：${id}'&#13;
		def map = [:]&#13;
		map.result = 1&#13;
		map.message = 'success'&#13;
		return map.toString()&#13;
	}&#13;
&#13;
}&#13;
```&#13;
&#13;
### 3. 开发完成，启动项目&#13;
&#13;
访问http://localhost:8080/services&#13;
&#13;
### 4. 配置拦截器&#13;
因为业务需要，配置拦截器，定义LogDbInterceptor.groovy&#13;
&#13;
```&#13;
&#13;
import org.apache.cxf.helpers.IOUtils&#13;
import org.apache.cxf.interceptor.Fault&#13;
import org.apache.cxf.message.Message&#13;
import org.apache.cxf.phase.AbstractPhaseInterceptor&#13;
&#13;
/**&#13;
 * 拦截器&#13;
 * 用以记录日志&#13;
 */&#13;
class LogDbInterceptor extends AbstractPhaseInterceptor&lt;Message&gt;{&#13;
&#13;
&#13;
    LogDbInterceptor(String phase) {&#13;
        super(phase)&#13;
    }&#13;
&#13;
    @Override&#13;
    void handleMessage(Message message) throws Fault {&#13;
        InputStream is = message.getContent(InputStream.class)&#13;
        if (is != null) {&#13;
            try {&#13;
                // 得到报文&#13;
                String str = IOUtils.toString(is);&#13;
                println str&#13;
//                &lt;soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:rec='http://recruit.bjrxkj.com/'&gt;&#13;
//                    &lt;soapenv:Header/&gt;&#13;
//                    &lt;soapenv:Body&gt;&#13;
//                        &lt;rec:serviceMethod&gt;&#13;
//                            &lt;!--Optional:--&gt;&#13;
//                            &lt;id&gt;111111&lt;/id&gt;&#13;
//                        &lt;/rec:serviceMethod&gt;&#13;
//                    &lt;/soapenv:Body&gt;&#13;
//                &lt;/soapenv:Envelope&gt;&#13;
                // 流读取之后，会报Couldn't parse stream.&#13;
                InputStream ism = new ByteArrayInputStream(str.getBytes());&#13;
                message.setContent(InputStream.class, ism);&#13;
            } catch (IOException e) {&#13;
                e.printStackTrace();&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### 5. 注入Bean&#13;
&#13;
此处在Application中注入定义的拦截器&#13;
&#13;
```&#13;
import com.bjrxkj.recruit.interceptor.LogDbInterceptor&#13;
import grails.boot.GrailsApp&#13;
import grails.boot.config.GrailsAutoConfiguration&#13;
import org.apache.cxf.phase.Phase&#13;
import org.springframework.context.annotation.Bean&#13;
&#13;
class Application extends GrailsAutoConfiguration {&#13;
    static void main(String[] args) {&#13;
        GrailsApp.run(Application, args)&#13;
    }&#13;
&#13;
    @Bean&#13;
    public LogDbInterceptor logDbInterceptor() {&#13;
        // Phase.RECEIVE 在接收的时候进行拦截&#13;
        return new LogDbInterceptor(Phase.RECEIVE);&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### 6. webservice引用拦截器&#13;
&#13;
```&#13;
import grails.gorm.transactions.Transactional&#13;
import org.grails.cxf.utils.GrailsCxfEndpoint&#13;
&#13;
import javax.jws.WebMethod&#13;
import javax.jws.WebParam&#13;
import javax.jws.WebResult&#13;
&#13;
@Transactional&#13;
@GrailsCxfEndpoint(address = '/demo', inInterceptors = ['logDbInterceptor'])&#13;
class DemoService {&#13;
&#13;
    @WebMethod&#13;
    @WebResult(name = 'result')&#13;
    def serviceMethod(@WebParam(name = 'id')Long id) {&#13;
        println '接收到的ID為：${id}'&#13;
        def map = [:]&#13;
        map.result = 1&#13;
        map.message = 'success'&#13;
        return map.toString()&#13;
    }&#13;
}&#13;
```&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Grails3.X-kai-fa-WebService.html</guid><pubDate>Mon, 01 Jul 2024 10:52:46 +0000</pubDate></item><item><title>Linux防火墙开放端口</title><link>https://toplhy.github.io/post/Linux-fang-huo-qiang-kai-fang-duan-kou.html</link><description>```&#13;
// 关闭防火墙&#13;
systemctl stop firewalld.service&#13;
// 开启防火墙&#13;
systemctl start firewalld.service&#13;
// 查看防火墙状态&#13;
systemctl status firewalld.service&#13;
//查看端口开放情况&#13;
sudo firewall-cmd --list-all&#13;
&#13;
// 开放http 80端口&#13;
sudo firewall-cmd --add-service=http --permanent&#13;
sudo firewall-cmd --add-port=80/tcp --permanent&#13;
//删除80端口&#13;
sudo firewall-cmd --remove-port=80/tcp --permanent&#13;
&#13;
//重启防火墙&#13;
sudo firewall-cmd --reload&#13;
```&#13;
。</description><guid isPermaLink="true">https://toplhy.github.io/post/Linux-fang-huo-qiang-kai-fang-duan-kou.html</guid><pubDate>Mon, 01 Jul 2024 10:52:09 +0000</pubDate></item><item><title>【JVM】34.类加载的过程</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9134.-lei-jia-zai-de-guo-cheng.html</link><description>## 类加载的过程&#13;
&#13;
### 加载&#13;
&#13;
  在加载阶段，虚拟机要完成一下3件事情：&#13;
&#13;
  1. 通过一个类的全限定名来获取定义此类的二进制字节流&#13;
&#13;
  2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构&#13;
&#13;
  3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口&#13;
&#13;
### 验证&#13;
&#13;
  验证是连接阶段的第一步，目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9134.-lei-jia-zai-de-guo-cheng.html</guid><pubDate>Mon, 01 Jul 2024 10:50:33 +0000</pubDate></item><item><title>【JVM】33.类加载的时机</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9133.-lei-jia-zai-de-shi-ji.html</link><description>## 类加载的时机&#13;
&#13;
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是Java的类加载机制。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9133.-lei-jia-zai-de-shi-ji.html</guid><pubDate>Mon, 01 Jul 2024 10:49:50 +0000</pubDate></item><item><title>【JVM】32.字节码指令</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9132.-zi-jie-ma-zhi-ling.html</link><description>## 字节码指令&#13;
&#13;
Java虚拟机的指令是由一个字节长度的、代表这某种特定操作含义的数字（操作码，Opcode）以及跟随其后的零至多个代表此操作所需参数（操作数，Operands）而构成。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9132.-zi-jie-ma-zhi-ling.html</guid><pubDate>Mon, 01 Jul 2024 10:49:10 +0000</pubDate></item><item><title>【JVM】31.类文件结构-属性表集合</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9131.-lei-wen-jian-jie-gou---shu-xing-biao-ji-he.html</link><description>## 类文件结构-属性表集合&#13;
&#13;
在Class文件、字段表】方法表都可以携带自己的属性表集合，以用于描述某些场景专有的信息。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9131.-lei-wen-jian-jie-gou---shu-xing-biao-ji-he.html</guid><pubDate>Mon, 01 Jul 2024 10:48:33 +0000</pubDate></item><item><title>【JVM】30.类文件结构-字段表集合、方法表集合</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9130.-lei-wen-jian-jie-gou---zi-duan-biao-ji-he-%E3%80%81-fang-fa-biao-ji-he.html</link><description>## 	类文件结构-字段表集合、方法表集合&#13;
&#13;
### 字段表集合&#13;
&#13;
  字段表用于描述接口或类中声明的变量。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9130.-lei-wen-jian-jie-gou---zi-duan-biao-ji-he-%E3%80%81-fang-fa-biao-ji-he.html</guid><pubDate>Mon, 01 Jul 2024 10:48:01 +0000</pubDate></item><item><title>【JVM】29.类索引、父类索引与接口索引集合</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9129.-lei-suo-yin-%E3%80%81-fu-lei-suo-yin-yu-jie-kou-suo-yin-ji-he.html</link><description>## 类索引、父类索引与接口索引集合&#13;
&#13;
类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引集合（interfaces）是一组u2类型的数据的集合，Class文件中由这三项数据来确定这个类的继承关系。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9129.-lei-suo-yin-%E3%80%81-fu-lei-suo-yin-yu-jie-kou-suo-yin-ji-he.html</guid><pubDate>Mon, 01 Jul 2024 10:47:27 +0000</pubDate></item><item><title>【JVM】28.类文件结构-访问标志</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9128.-lei-wen-jian-jie-gou---fang-wen-biao-zhi.html</link><description>## 类文件结构-访问标志&#13;
&#13;
在常量池结束之后，紧接着的两个字节代表访问标志（access_flags），这个标志用于识别一些类或接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final等。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9128.-lei-wen-jian-jie-gou---fang-wen-biao-zhi.html</guid><pubDate>Mon, 01 Jul 2024 10:46:53 +0000</pubDate></item><item><title>【JVM】27.类文件结构-常量池</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9127.-lei-wen-jian-jie-gou---chang-liang-chi.html</link><description>## 类文件结构-常量池&#13;
&#13;
紧接着主次版本号之后的是常量池入口，常量池可以理解为Class文件中的资源仓库，它是Class文件结构中与其他项目关联最多的数据类型，同时它还是在Class文件中第一个出现的表类型数据项目。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9127.-lei-wen-jian-jie-gou---chang-liang-chi.html</guid><pubDate>Mon, 01 Jul 2024 10:46:13 +0000</pubDate></item><item><title>【JVM】26.魔数与Class版本号</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9126.-mo-shu-yu-Class-ban-ben-hao.html</link><description>## 魔数与Class版本号&#13;
&#13;
每个Class文件的头4个字节称为魔数，它的唯一作用是确定这个文件是否为一个能被虚拟机接受的Class文件。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9126.-mo-shu-yu-Class-ban-ben-hao.html</guid><pubDate>Mon, 01 Jul 2024 10:45:43 +0000</pubDate></item><item><title>【JVM】25.Class类文件的结构</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9125.Class-lei-wen-jian-de-jie-gou.html</link><description>## Class类文件的结构&#13;
&#13;
Java虚拟机不和包括Java在内的任何语言绑定，它只与Class文件这种特定的二进制文件格式关联，Class文件中包含了Java虚拟机指令集和符号表以及若干其他辅助信息。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9125.Class-lei-wen-jian-de-jie-gou.html</guid><pubDate>Mon, 01 Jul 2024 10:45:08 +0000</pubDate></item><item><title>【JVM】24.可能出现的故障</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9124.-ke-neng-chu-xian-de-gu-zhang.html</link><description>## 可能出现的故障&#13;
+ 集群间同步导致内存溢出&#13;
&#13;
+ 堆外内存导致溢出错误&#13;
&#13;
  除了Java堆和永久代之外，下面这些区域还会闸弄较多的内存：&#13;
&#13;
  + Direct Memory：可通过-XX:MaxDirectMemorySize调整大小，内存不足时抛出OutOfMemoryError或者OutOfMemoryError：Direct buffer memory&#13;
&#13;
    垃圾收集进行时，虚拟机虽然会对Direct Memory进行回收，但是Direct Memory却不能像新生代、老年代那样，发现空间不足就通知收集器进行垃圾回收，它只能等待老年代满了后Full GC，然后顺便帮它清理掉内存中的废弃对象&#13;
&#13;
  + 线程堆栈：可通过-Xss调整大小，内存不足时抛出StackOverflowError或者OutOfMemoryError：unable  to create new native thread&#13;
&#13;
  + Socket缓存区：每个Socket连接都Receive和Send两个缓存区，分别占37KB和25KB内存，连接多的话这块内存占用也比较客观。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9124.-ke-neng-chu-xian-de-gu-zhang.html</guid><pubDate>Mon, 01 Jul 2024 10:44:34 +0000</pubDate></item><item><title>【JVM】23.高性能硬件上的程序部署策略</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9123.-gao-xing-neng-ying-jian-shang-de-cheng-xu-bu-shu-ce-lve.html</link><description>## 高性能硬件上的程序部署策略&#13;
&#13;
在高性能硬件上部署程序，目前有两种方式：&#13;
&#13;
+ 通过64位JDK来使用大内存&#13;
&#13;
  可以给虚拟机分配超大堆的前提是有把握把应用程序的Full GC频率控制得足够低，控制Full GC频率的关键是看应用中的绝大多数对象能否符合朝生夕死的原则，即大多数对象的生存时间不应太长，尤其是不能有成批量的、长时间生存的大对象产生，这样才能保障老年代空间的稳定。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9123.-gao-xing-neng-ying-jian-shang-de-cheng-xu-bu-shu-ce-lve.html</guid><pubDate>Mon, 01 Jul 2024 10:43:59 +0000</pubDate></item><item><title>【JVM】22.JDK可视化工具-VisualVM</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9122.JDK-ke-shi-hua-gong-ju--VisualVM.html</link><description>## JDK可视化工具-VisualVM&#13;
&#13;
VisualVM是随JDK发布的功能最强大的运行监视和故障处理程序。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9122.JDK-ke-shi-hua-gong-ju--VisualVM.html</guid><pubDate>Mon, 01 Jul 2024 10:43:26 +0000</pubDate></item><item><title>【JVM】21.JDK可视化工具-JConsole</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9121.JDK-ke-shi-hua-gong-ju--JConsole.html</link><description>## JDK可视化工具-JConsole&#13;
&#13;
JConsole是一种基于JMX的可视化监测、管理工具。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9121.JDK-ke-shi-hua-gong-ju--JConsole.html</guid><pubDate>Mon, 01 Jul 2024 10:42:51 +0000</pubDate></item><item><title>【JVM】20.JDK命令行工具-jstack</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9120.JDK-ming-ling-xing-gong-ju--jstack.html</link><description>## JDK命令行工具-jstack&#13;
&#13;
jstack命令用来生成虚拟机当前时刻的线程快照。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9120.JDK-ming-ling-xing-gong-ju--jstack.html</guid><pubDate>Mon, 01 Jul 2024 10:42:12 +0000</pubDate></item><item><title>【JVM】17.JDK命令行工具-jinfo</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9117.JDK-ming-ling-xing-gong-ju--jinfo.html</link><description>## JDK命令行工具-jinfo&#13;
&#13;
jinfo的作用是实时的查看和调整虚拟机各项参数。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9117.JDK-ming-ling-xing-gong-ju--jinfo.html</guid><pubDate>Mon, 01 Jul 2024 10:40:39 +0000</pubDate></item><item><title>【JVM】16.JDK命令行工具-jstat</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9116.JDK-ming-ling-xing-gong-ju--jstat.html</link><description>##  JDK命令行工具-jstat&#13;
&#13;
jstat：虚拟机统计信息监视工具&#13;
&#13;
jstat用于见识虚拟机各种运行状态信息的命令行工具。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9116.JDK-ming-ling-xing-gong-ju--jstat.html</guid><pubDate>Mon, 01 Jul 2024 10:40:03 +0000</pubDate></item><item><title>【JVM】15.JDK命令行工具-jps</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9115.JDK-ming-ling-xing-gong-ju--jps.html</link><description>## JDK命令行工具-jps&#13;
&#13;
jps：虚拟机进程状况工具&#13;
&#13;
jps可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier，LVMID）。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9115.JDK-ming-ling-xing-gong-ju--jps.html</guid><pubDate>Mon, 01 Jul 2024 10:39:32 +0000</pubDate></item><item><title>【JVM】14.内存分配与回收策略</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9114.-nei-cun-fen-pei-yu-hui-shou-ce-lve.html</link><description>## 内存分配与回收策略&#13;
&#13;
+ 对象优先在Eden分配&#13;
&#13;
  大多数情况下，对象在新生代Eden区中分配。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9114.-nei-cun-fen-pei-yu-hui-shou-ce-lve.html</guid><pubDate>Mon, 01 Jul 2024 10:39:01 +0000</pubDate></item><item><title>【JVM】13.GC日志和垃圾收集器参数总结</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9113.GC-ri-zhi-he-la-ji-shou-ji-qi-can-shu-zong-jie.html</link><description>## GC日志和垃圾收集器参数总结&#13;
&#13;
+ GC日志&#13;
&#13;
  例：33.125:  [GC  [DefNew:  3324/k-&gt;152K(3712K),  0.0025925 secs]  3324K-&gt;152K(11904K), 0.0031680 secs]&#13;
&#13;
  例：100.667:  [Full GC  [Tenured:  0K-&gt;210K(10240K), 0.0149142  secs]  4603K-&gt;210K(19456K),  [Perm:  2999K-&gt;2999K(21248K), 0.0150007  secs]]  &#13;
&#13;
  + 33.125、 100.667：表示GC发生的时间，这数字指的是从虚拟机启动以来经过的秒数。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9113.GC-ri-zhi-he-la-ji-shou-ji-qi-can-shu-zong-jie.html</guid><pubDate>Mon, 01 Jul 2024 10:38:15 +0000</pubDate></item><item><title>【JVM】12.垃圾收集器3-G1收集器</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9112.-la-ji-shou-ji-qi-3-G1-shou-ji-qi.html</link><description>## 垃圾收集器3-G1收集器&#13;
&#13;
G1收集器是当今收集器技术发展最前沿的成果之一，与其他收集器相比，G1收集器具备一下特点：&#13;
&#13;
+ 并行与并发：其他部分收集器原本需要停顿Java线程执行的GC动作，G1收集器任然可以通过并发的方式让Java线程继续运行。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9112.-la-ji-shou-ji-qi-3-G1-shou-ji-qi.html</guid><pubDate>Mon, 01 Jul 2024 10:33:55 +0000</pubDate></item><item><title>【JVM】11.垃圾收集器2-CMS收集器</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9111.-la-ji-shou-ji-qi-2-CMS-shou-ji-qi.html</link><description>## 垃圾收集器2-CMS收集器&#13;
&#13;
CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9111.-la-ji-shou-ji-qi-2-CMS-shou-ji-qi.html</guid><pubDate>Mon, 01 Jul 2024 10:31:45 +0000</pubDate></item><item><title>【JVM】10.垃圾收集器1</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9110.-la-ji-shou-ji-qi-1.html</link><description>## 垃圾收集器1&#13;
&#13;
### Serial收集器&#13;
&#13;
   Serial收集器是最基本、发展历史最悠久的收集器。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%9110.-la-ji-shou-ji-qi-1.html</guid><pubDate>Mon, 01 Jul 2024 08:15:45 +0000</pubDate></item><item><title>【JVM】9.枚举根节点、安全点、安全区域</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%919.-mei-ju-gen-jie-dian-%E3%80%81-an-quan-dian-%E3%80%81-an-quan-qu-yu.html</link><description>## 枚举根节点、安全点、安全区域&#13;
&#13;
### 1. 枚举根节点&#13;
&#13;
   可作为GC Roots的节点主要在全局性引用（常量、类静态属性）和执行上下文（栈帧中的本地变量表）。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%919.-mei-ju-gen-jie-dian-%E3%80%81-an-quan-dian-%E3%80%81-an-quan-qu-yu.html</guid><pubDate>Mon, 01 Jul 2024 08:15:13 +0000</pubDate></item><item><title>【JVM】8.垃圾收集算法</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%918.-la-ji-shou-ji-suan-fa.html</link><description>## 垃圾收集算法&#13;
&#13;
### 1. 标记-清除算法&#13;
&#13;
   分为“标记”和“清除”两个阶段：首先标记出需要回收的对象，在标记完成后统一回收所有被标记的对象。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%918.-la-ji-shou-ji-suan-fa.html</guid><pubDate>Mon, 01 Jul 2024 08:14:41 +0000</pubDate></item><item><title>【JVM】7.对象存活判定</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%917.-dui-xiang-cun-huo-pan-ding.html</link><description>## 对象存活判定&#13;
&#13;
![jvm_7](/images/jvm/jvm_7.png)&#13;
&#13;
+ 对象没有覆盖finalize()方法或者finalize()方法已被虚拟机调用过，虚拟机将认为这两种情况为“没有必要执行”。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%917.-dui-xiang-cun-huo-pan-ding.html</guid><pubDate>Mon, 01 Jul 2024 08:14:10 +0000</pubDate></item><item><title>【JVM】6.对象引用类型</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%916.-dui-xiang-yin-yong-lei-xing.html</link><description>## 对象引用类型（Reference）&#13;
&#13;
Java将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4种。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%916.-dui-xiang-yin-yong-lei-xing.html</guid><pubDate>Mon, 01 Jul 2024 08:13:30 +0000</pubDate></item><item><title>【JVM】5.检测对象是否已经被引用</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%915.-jian-ce-dui-xiang-shi-fou-yi-jing-bei-yin-yong.html</link><description>## 检测对象是否已经被引用&#13;
&#13;
在进行垃圾回收之前，首先要确定对象是否已经引用。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%915.-jian-ce-dui-xiang-shi-fou-yi-jing-bei-yin-yong.html</guid><pubDate>Mon, 01 Jul 2024 08:08:11 +0000</pubDate></item><item><title>【JVM】4.对象的访问定位</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%914.-dui-xiang-de-fang-wen-ding-wei.html</link><description>## 对象的访问定位&#13;
&#13;
使用对象时Java程序通过栈上的reference数据来操作堆上的对象实例。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%914.-dui-xiang-de-fang-wen-ding-wei.html</guid><pubDate>Mon, 01 Jul 2024 08:07:39 +0000</pubDate></item><item><title>【JVM】3.对象的内存布局</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%913.-dui-xiang-de-nei-cun-bu-ju.html</link><description>## 对象的内存布局&#13;
&#13;
对象在内存中的布局分为3块区域：对象头、实例数据、对齐填充。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%913.-dui-xiang-de-nei-cun-bu-ju.html</guid><pubDate>Mon, 01 Jul 2024 08:05:52 +0000</pubDate></item><item><title>【JVM】 2.对象的创建过程</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%91%202.-dui-xiang-de-chuang-jian-guo-cheng.html</link><description>## 对象的创建过程&#13;
&#13;
![jvm_2](/images/jvm/jvm_2.png)&#13;
&#13;
&#13;
+ 为对象分配内存：指针碰撞、空闲列表。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%91%202.-dui-xiang-de-chuang-jian-guo-cheng.html</guid><pubDate>Mon, 01 Jul 2024 08:05:22 +0000</pubDate></item><item><title>【JVM】1.Java运行时内存区域划分</title><link>https://toplhy.github.io/post/%E3%80%90JVM%E3%80%911.Java-yun-xing-shi-nei-cun-qu-yu-hua-fen.html</link><description>## Java运行时内存区域划分&#13;
&#13;
### 1.程序计数器：&#13;
&#13;
为线程私有，存储的是当前线程所执行程序的内存地址。</description><guid isPermaLink="true">https://toplhy.github.io/post/%E3%80%90JVM%E3%80%911.Java-yun-xing-shi-nei-cun-qu-yu-hua-fen.html</guid><pubDate>Mon, 01 Jul 2024 08:04:42 +0000</pubDate></item><item><title>Grails自定义权限标签</title><link>https://toplhy.github.io/post/Grails-zi-ding-yi-quan-xian-biao-qian.html</link><description>grails项目中使用了spring security 插件实现身份认证。</description><guid isPermaLink="true">https://toplhy.github.io/post/Grails-zi-ding-yi-quan-xian-biao-qian.html</guid><pubDate>Mon, 01 Jul 2024 08:02:52 +0000</pubDate></item><item><title>Grails2.X开发调用WebService</title><link>https://toplhy.github.io/post/Grails2.X-kai-fa-diao-yong-WebService.html</link><description>## 开发webservice接口&#13;
&#13;
### 1. 新建grails1/2工程项目&#13;
&#13;
### 2. 在BuildConfig.groovy文件的plugins闭包中加入cxf服务端插件：&#13;
&#13;
```&#13;
compile 'org.grails.plugins:cxf:2.1.1'&#13;
```&#13;
&#13;
### 3. 在Config.groovy文件中配置cxf&#13;
![1](https://github.com/toplhy/toplhy.github.io/blob/main/images/grails/grails_1.png?raw=true)&#13;
&#13;
### 4. 在grails-app/services目录下创建一个TestService类&#13;
&#13;
### 5. 启动项目&#13;
输入http://localhost:8080/cxfProject/services 可以看到我们开发的接口，点击链接就是生成的WSDL文件。</description><guid isPermaLink="true">https://toplhy.github.io/post/Grails2.X-kai-fa-diao-yong-WebService.html</guid><pubDate>Mon, 01 Jul 2024 07:34:10 +0000</pubDate></item></channel></rss>